#!/usr/bin/perl
#
# ASTPP Calling Card Refilling
#
# Copyright (C) 2006, DNW Consulting
#
# Darren Wiebe <darren@dnwconsulting.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 2 as
#    published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Contact information can be found @ www.dnwconsulting.net
#
# This program is used to refill calling cards by emptying one card into another.
# Here's an example on how to call it.
#
#
# exten => s,1,DeadAGI(astpp-refill.agi)
#
#
###########################################################################`

use POSIX qw(ceil floor);
use POSIX qw(strftime);
use DBI;
use Asterisk::AGI;
use strict;
require "/usr/local/astpp/astpp-common.pl";
use vars qw($vars $verbose $astpp_db $AGI $config $enh_config @output $phone $sound);
$verbose    = 2;
@output     = ("STDERR");
$AGI        = new Asterisk::AGI;
$config     = &load_config();
$enh_config = &load_config_enh();
$astpp_db   = &connect_db( $config, $enh_config, @output );
$config     = &load_config_db( $astpp_db, $config );
$sound	= &define_sounds($astpp_db);
$SIG{HUP}   = 'ignore_hup';
my $verbosity     = 2;
my $input_timeout = 15000;    #How long do we wait for input? Specified in MS							                        

sub ignore_hup {
	foreach my $handle (@output) {
		print $handle "HUP received\n";
	}
}


sub say_balance() { #Calculate and say the card balance.
	my ($cardinfo) = @_;
	my ( $connectfee, $cost, $included, $sub_balance, $balance, $main_balance );
	$balance = $cardinfo->{value} - $cardinfo->{used};
	if ( $balance > 0 ) {
		$balance      = $balance / 10000;
		$balance      = sprintf( "%.2f", $balance );
		$sub_balance  = substr( $balance, -2, 2 );
		$main_balance  = substr( $balance, 0, -2 );
		$AGI->stream_file($sound->{card_has_balance_of});
		if ( $main_balance == 1 ) {
			$AGI->say_number($main_balance);
			$AGI->stream_file($sound->{main_currency});
		}
		elsif ( $main_balance > 1 ) {
			$AGI->say_number($main_balance);
			$AGI->stream_file($sound->{main_currency_plural});
		}
		if ( $sub_balance == 1 ) {
			$AGI->say_number($sub_balance);
			$AGI->stream_file($sound->{sub_currency});
		}
		elsif ( $sub_balance > 1 ) {
			$AGI->say_number($sub_balance);
			$AGI->stream_file($sound->{sub_currency_plural});
		}
	}
	else {
		$AGI->stream_file($sound->{card_is_empty});
		$AGI->stream_file($sound->{goodbye});
		exit(0);
	}
	return $balance;
}

sub update_balance() {  #Update the available credit on the calling card. 
	my ( $cardinfo, $charge ) = @_;
	my $sql =
	    "UPDATE callingcards SET used = "
	  . $astpp_db->quote( ($charge) + $cardinfo->{used} )
	  . " WHERE cardnumber = "
	  . $astpp_db->quote( $cardinfo->{cardnumber} );
	$astpp_db->do($sql);
}

sub write_cdr() { # Write the callingcardcdr record if this is a calling card.
	my (
		$cardinfo,  $clid,   $destination, $status,
		$callstart, $charge, $answeredtime
	  )
	  = @_;
	my ($sql);
	if (!$status) {$status = gettext("N/A"); }
	$sql =
"INSERT INTO callingcardcdrs (cardnumber,clid,destination,disposition,callstart,seconds,"
	  . "debit) VALUES ("
	  . $astpp_db->quote( $cardinfo->{cardnumber} ) . ", "
	  . $astpp_db->quote($clid) . ", "
	  . $astpp_db->quote($destination) . ", "
	  . $astpp_db->quote($status) . ", "
	  . $astpp_db->quote($callstart) . ", "
	  . $astpp_db->quote($answeredtime) . ", "
	  . $astpp_db->quote($charge) . ")";
	$astpp_db->do($sql);
}


######################################################################
# Beginning of Program
######################################################################
my ( $destcardnumber, $destpin, $sourcecardnumber, $sourcepin ) = @ARGV;
$AGI->answer();
my ( $retries );

########  Collect Information on the destination card.
my $destcardinfo;
my $destcardinfo = &get_callingcard( $astpp_db, $destcardnumber ) if $destcardnumber;
my $retries = 0;
while ( $destcardinfo->{status} != 1 && $retries < 3 ) {
	my $cardnum = $AGI->get_data( $sound->{card_to_refill}, $input_timeout );
	$destcardinfo = &get_callingcard( $astpp_db, $cardnum );
	$AGI->verbose( "ASTPP Number: $cardnum ", $verbosity )
	  if $config->{debug} == 1;
	$AGI->verbose( "ASTPP Number Status: $destcardinfo->{status}", $verbosity )
	  if $config->{debug} == 1;
	if ( $destcardinfo->{status} != 1 ) {
		$AGI->stream_file($sound->{cardnumber_incorrect});
		$retries++;
	}
}
$retries = 0;
while ( $destcardinfo->{pin} != $destpin && $retries < 3 ) {
	$destpin = $AGI->get_data( $sound->{pin}, $input_timeout );
	if ( $destcardinfo->{pin} != $destpin ) {
		$AGI->stream_file($sound->{pin_incorrect});
	}
	$retries++;
}
if ( $destpin != $destcardinfo->{pin} ) {
	$AGI->stream_file($sound->{pin_incorrect});
	$AGI->stream_file($sound->{goodbye});
	exit(0);
}
my $cardstatus = &check_card_status( $astpp_db, $destcardinfo );
# This subroutine returns the status of the card:
if ( $cardstatus == 1 ) {
	$AGI->stream_file($sound->{card_inuse});
	$AGI->stream_file($sound->{goodbye});
	exit(0);
} elsif ( $cardstatus == 2 ) {
	$AGI->stream_file($sound->{card_has_expired});
	$AGI->stream_file($sound->{goodbye});
	exit(0)
} elsif ( $cardstatus == 3 ) {
	$AGI->stream_file($sound->{card_is_empty});
	$AGI->stream_file($sound->{goodbye});
	exit(0)
}

my $balance = &say_balance($destcardinfo);

#########  Collect information on source card.
my $sourcecardinfo;
my $sourcepin;
$sourcecardinfo = &get_callingcard( $astpp_db, $sourcecardnumber ) if $sourcecardnumber;
$retries = 0;
while ( $sourcecardinfo->{status} != 1 && $retries < 3 ) {
	my $cardnum = $AGI->get_data( $sound->{card_to_empty}, $input_timeout );
	$sourcecardinfo = &get_callingcard( $astpp_db, $cardnum );
	$AGI->verbose( "ASTPP Number: $cardnum ", $verbosity )
	  if $config->{debug} == 1;
	$AGI->verbose( "ASTPP Number Status: $sourcecardinfo->{status}", $verbosity )
	  if $config->{debug} == 1;
	if ( $sourcecardinfo->{status} != 1 ) {
		$AGI->stream_file($sound->{cardnumber_incorrect});
		$retries++;
	}
}
$cardstatus = &check_card_status( $astpp_db, $sourcecardinfo );
# This subroutine returns the status of the card:
if ( $cardstatus == 1 ) {
	$AGI->stream_file($sound->{card_inuse});
	$AGI->stream_file($sound->{goodbye});
	exit(0);
} elsif ( $cardstatus == 2 ) {
	$AGI->stream_file($sound->{card_has_expired});
	$AGI->stream_file($sound->{goodbye});
	exit(0)
} elsif ( $cardstatus == 3 ) {
	$AGI->stream_file($sound->{card_is_empty});
	$AGI->stream_file($sound->{goodbye});
	exit(0)
}
$retries = 0;
while ( $sourcecardinfo->{pin} != $sourcepin && $retries < 3 ) {
	$sourcepin = $AGI->get_data( $sound->{astpp_please_pin_card_empty}, $input_timeout );
	if ( $sourcecardinfo->{pin} != $sourcepin ) {
		$AGI->stream_file($sound->{pin_incorrect});
	}
	$retries++;
}
if ( $sourcepin != $sourcecardinfo->{pin} ) {
	$AGI->stream_file($sound->{pin_incorrect});
	$AGI->stream_file($sound->{goodbye});
	exit(0);
}
my $cardstatus = &check_card_status( $astpp_db, $sourcecardinfo );
# This subroutine returns the status of the card:
if ( $cardstatus == 1 ) {
	$AGI->stream_file($sound->{card_inuse});
	$AGI->stream_file($sound->{goodbye});
	exit(0);
} elsif ( $cardstatus == 2 ) {
	$AGI->stream_file($sound->{card_has_expired});
	$AGI->stream_file($sound->{goodbye});
	exit(0)
} elsif ( $cardstatus == 3 ) {
	$AGI->stream_file($sound->{card_is_empty});
	$AGI->stream_file($sound->{goodbye});
	exit(0)
}

$balance = &say_balance($sourcecardinfo);
# If we get this far that means that both the source and the destination card are ok.

$astpp_db->do("UPDATE callingcards SET used = "
	  . $astpp_db->quote( $sourcecardinfo->{value} )
	  . " WHERE cardnumber = "
	  . $astpp_db->quote( $sourcecardinfo->{cardnumber} ));

$astpp_db->do("UPDATE callingcards SET status = '2'"
	  . " WHERE cardnumber = "
	  . $astpp_db->quote( $sourcecardinfo->{cardnumber} ));	  
	  
$astpp_db->do("UPDATE callingcards SET value = "
	  . $astpp_db->quote( ($sourcecardinfo->{value} - $sourcecardinfo->{used}) + $destcardinfo->{value} )
	  . " WHERE cardnumber = "
	  . $astpp_db->quote( $destcardinfo->{cardnumber} ));	  
	  
$AGI->stream_file($sound->{card_has_been_refilled});

exit(0);
