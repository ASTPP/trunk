#!/usr/bin/perl
#
# ASTPP - Open Source Voip Billing
#
# Copyright (C) 2004, Aleph Communications
#
# Darren Wiebe (darren@aleph-com.net)
#
# This program is Free Software and is distributed under the
# terms of the GNU General Public License version 2.
#
# This script is used to authenticate calls to ASTPP accounts based on pin codes in the Dialplan.
# It can be used to do wholesale SIP termination which is authenticated by a pin code that is dialed
# in front of the number to be called.
#
# [astpp]
#
# exten => _XXXXXXXXXX,1,AGI(astpp-ip-map.agi,${SIPCHANINFO(recvip)})
# exten => _XXXXXXXXXX,n,GotoIf($["${CALLSTATUS}" = "0"]?60)
# exten => _XXXXXXXXXX,n,SetAccount(${ACCOUNTCODE})
# exten => _XXXXXXXXXX,n,# Outgoing call logic goes here.
# exten => _XXXXXXXXXX,n,Hangup
# exten => _XXXXXXXXXX,60,Congestion ; No Account
# exten => _XXXXXXXXXX,61,Hangup
use DBI;
use Asterisk::AGI;
use POSIX qw(ceil floor);
use POSIX qw(strftime);
use strict;
use vars qw(@output $verbose $AGI $config $enh_config $SIG $astpp_db);
@output = ( "STDERR", "LOGFILE" );
$verbose = 2;
require "/usr/local/astpp/astpp-common.pl";
$AGI = new Asterisk::AGI;

sub initialize() {
	$SIG{HUP}   = 'ignore_hup';
	$config     = &load_config();
	$enh_config = &load_config_enh();
	$astpp_db = &connect_db( $config, $enh_config, @output );
	$config     = &load_config_db($astpp_db,$config);
}

sub ignore_hup {
	foreach my $handle (@output) {
		print $handle "HUP received\n";
		$AGI->verbose( "HUP received!\n", $verbose );
	}
}

sub get_ip() {
	my ($number) = @_;
	my ($sql);
	$sql =
	  $astpp_db->prepare(
		"SELECT * FROM ip_map WHERE ip = " . $astpp_db->quote($number) );
	$sql->execute;
	$AGI->verbose( "$sql\n", $verbose );
	my $anidata = $sql->fetchrow_hashref;
	$sql->finish;
	return $anidata;
}
################# Program Starts Here #################################
my ($number) = @ARGV;
my ($sql);
&initialize;
my $anidata = &get_ip($number);
if ($anidata) {
	my $carddata=&get_account($astpp_db, $anidata->{account});
	$AGI->set_variable( 'ACCOUNTCODE', "\"$carddata->{cc}\"" );
	$AGI->exec( 'Set',        "ACCOUNTCODE=$carddata->{cc}" );
	$AGI->exec( 'SetAccount', "$carddata->{cc}" );
}
else {
	$AGI->set_variable( 'CALLSTATUS', "\"0\"" );
	$AGI->exec( 'Set', "CALLSTATUS=0" );
}
