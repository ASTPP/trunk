#!/usr/bin/perl
#
# ASTPP - Open Source Voip Billing
#
# Copyright (C) 2004, Aleph Communications
#
# Darren Wiebe (darren@aleph-com.net)
#
# This program is Free Software and is distributed under the
# terms of the GNU General Public License version 2.
#
# Sample Configuration
# [astpp-callingcards]
# exten => s,1,Answer
# exten => s,n,DeadAGI(astpp-callingcards.agi)
# exten => s,n,GotoIf($["${NEWCALL}" = "1"]?60)
# exten => s,n,GotoIf($["${BALANCE}" = "1"]?70)
# exten => s,n,Hangup
# exten => s,60,DeadAGI(astpp-callingcards.agi,${CARDNUMBER})
# exten => s,n,Hangup
# exten => s,70,DeadAGI(astpp-callingcards.agi,${CARDNUMBER},BALANCE)
#
#############################################################################
use DBI;
use Asterisk::AGI;
use POSIX qw(ceil floor);
use POSIX qw(strftime);
use strict;
use vars qw(@output $verbosity $AGI $config $enh_config $astpp_db
  %input $cc $pricelistinfo $brandinfo $sound);
@output    = ( "STDERR", "LOGFILE" );
$verbosity = 2;
$cc        = 0;
require "/usr/local/astpp/astpp-common.pl";
$AGI = new Asterisk::AGI;

my $input_timeout = 15000;       #How long do we wait for input? Specified in MS

sub initialize() {
	$SIG{HUP}   = 'ignore_hup';  # We ignore the HUP command that Asterisk sends on a call hangup.
	$config     = &load_config(); # Load /var/lib/astpp/astpp-config.conf
	$enh_config = &load_config_enh(); # Load /var/lib/astpp/astpp-enh-config.conf
	$astpp_db = &connect_db( $config, $enh_config, @output );
        $config     = &load_config_db($astpp_db,$config);
	$sound = &define_sounds($astpp_db);
}

sub ignore_hup {
	foreach my $handle (@output) {
		print $handle "HUP received\n";
	}
}

sub set_in_use() {  # Set the "inuse" flag on the calling cards.  This prevents multiple people from
# using the same card.
	my ( $cardinfo, $status ) = @_;
	my $sql;
	$sql =
	    "UPDATE callingcards SET inuse = "
	  . $astpp_db->quote($status)
	  . " WHERE cardnumber = "
	  . $astpp_db->quote( $cardinfo->{cardnumber} );
	$astpp_db->do($sql);
}

sub check_card() {  # Check a few things before saying the card is ok.
	my ($cardinfo) = @_;
	my $now = $astpp_db->selectall_arrayref("SELECT NOW() + 0")->[0][0];
	$AGI->verbose( "Present Time: $now",                        $verbosity );
	$AGI->verbose( "Expiration Date: $cardinfo->{expiry}",      $verbosity );
	$AGI->verbose( "Valid for Days: $cardinfo->{validfordays}", $verbosity );
	$AGI->verbose( "First Use: $cardinfo->{firstuse}",          $verbosity );
	if ( $cardinfo->{inuse} != 0 ) {  # If the card is in use then say so and leave.
		$AGI->stream_file($sound->{card_inuse});
		$AGI->stream_file($sound->{goodbye});
		&leave($cardinfo);
	}
	&set_in_use( $cardinfo, 1 ); # Now the card is in use and nobody else can use it.
	if ( $cardinfo->{firstused} eq "00000000000000" || $cardinfo->{firstused} eq "0000-00-00 00:00:00" ) {  	# If "firstused" has not been set, we will set it now.
															# At the same time we will update the "maint_day" field.
		my $sql =
		  "UPDATE callingcards SET firstused = NOW() WHERE cardnumber = "
		  . $astpp_db->quote( $cardinfo->{cardnumber} );
		$AGI->verbose( $sql, $verbosity ) if $config->{debug} == 1;
		$astpp_db->do($sql);
		$sql =
		    "UPDATE callingcards SET maint_day = DATE_ADD(NOW(), INTERVAL "
		  . "$cardinfo->{maint_fee_days} day) WHERE cardnumber = "
		  . $astpp_db->quote( $cardinfo->{cardnumber} );
		$AGI->verbose( $sql, $verbosity ) if $config->{debug} == 1;
		if ( $cardinfo->{maint_fee_days} > 0 ) {
			$astpp_db->do($sql);
		}
#		$cardinfo = &get_callingcard( $astpp_db, $cardinfo->{cardnumber} );
		if ( $cardinfo->{validfordays} > 0 ) { #Check if the card is set to expire and deal with that as appropriate.
			my $sql =
"UPDATE callingcards SET expiry = DATE_ADD(NOW(), INTERVAL "
			  . " $cardinfo->{validfordays} day) WHERE cardnumber = "
			  . $astpp_db->quote( $cardinfo->{cardnumber} );
			$AGI->verbose( $sql, $verbosity ) if $config->{debug} == 1;
			$astpp_db->do($sql);
			$cardinfo = &get_callingcard( $astpp_db, $cardinfo->{cardnumber} );
		}
	}
	elsif ( $cardinfo->{validfordays} > 0 ) {
		my $now = $astpp_db->selectall_arrayref("SELECT NOW() + 0")->[0][0];
		$cardinfo->{expiry} = $astpp_db->selectall_arrayref("SELECT DATE_FORMAT('$cardinfo->{expiry}' , '\%Y\%m\%d\%H\%i\%s')")->[0][0];
		if ( $now >= $cardinfo->{expiry} ) {
			my $sql =
			  "UPDATE callingcards SET status = 2 WHERE cardnumber = "
			  . $astpp_db->quote( $cardinfo->{cardnumber} );
			$AGI->verbose( $sql, $verbosity ) if $config->{debug} == 1;
			$astpp_db->do($sql);
			my $sql =
			  "DELETE FROM ani_map WHERE account = "
			  . $astpp_db->quote( $cardinfo->{cardnumber} );
			$AGI->verbose( $sql, $verbosity ) if $config->{debug} == 1;
			$astpp_db->do($sql);
			$AGI->stream_file($sound->{card_has_expired});
			$AGI->stream_file($sound->{goodbye});
			&leave($cardinfo);
		}
	}
	$AGI->verbose( "Present Time: $now",                        $verbosity );
	$AGI->verbose( "Expiration Date: $cardinfo->{expiry}",      $verbosity );
	$AGI->verbose( "Valid for Days: $cardinfo->{validfordays}", $verbosity );
	$AGI->verbose( "First Use: $cardinfo->{firstuse}",          $verbosity );
}

sub tell_cost() { #Say how much the call will cost.
	my ( $numberinfo, $pricelistinfo, $cardinfo,$perminsurcharge, $connectsurcharge ) = @_;
	my ( $connectfee, $cost, $included );
	if ( $pricelistinfo->{markup} ne "" && $pricelistinfo->{markup} != 0 ) {
		$numberinfo->{connectcost} =
		  $numberinfo->{connectcost} *
		  ( ( $pricelistinfo->{markup} / 100 ) + 100 );
		$numberinfo->{cost} =
		  $numberinfo->{cost} * ( ( $pricelistinfo->{markup} / 100 ) + 100 );
	}
	if ( $numberinfo->{connectfee} > 0 ) {
		$connectfee = ceil($numberinfo->{connectfee} / 100);
	}
	if ( $numberinfo->{cost} > 0 ) {
		$cost = ceil($numberinfo->{cost} / 100);
	}
	$cost = ($cost + ($perminsurcharge / 100)) if $perminsurcharge;
	$connectfee = ($connectfee + $connectsurcharge)) if $connectsurcharge;
	$AGI->stream_file($sound->{call_will_cost});
	$AGI->say_number($cost);
	$AGI->stream_file($sound->{sub_currency});
	$AGI->stream_file($sound->{per});
	$AGI->stream_file($sound->{minute});
	if ( $connectfee > 0 ) {
		$AGI->stream_file($sound->{a_connect_charge});
		$AGI->say_number($connectfee);
		$AGI->stream_file($sound->{sub_currency});
		$AGI->stream_file($sound->{will_apply});
	}
}

sub calc_charge() { # Calculate the cost on the call.
	my ( $cardinfo, $pricelistinfo, $numberinfo, $answeredtime,$perminsurcharge, $connectsurcharge  ) = @_;
	my ( $total_seconds, $bill_increments, $cost, $billseconds, $adjconn,
		$adjcost, $disconnect_fee, $minute_fee );
	$total_seconds =
	  ( $answeredtime - $numberinfo->{includedseconds} ) /
	  $pricelistinfo->{inc};
	if ( $total_seconds < 0 ) {
		$total_seconds = 0;
	}
	if ( $pricelistinfo->{markup} ne "" && $pricelistinfo->{markup} != 0 ) {
		$adjcost =
		  $numberinfo->{cost} * ( ( $pricelistinfo->{markup} / 100 ) + 100 );
		$adjconn =
		  $numberinfo->{connectcost} *
		  ( ( $pricelistinfo->{markup} / 100 ) + 100 );
	}
	else {
		$adjcost = $numberinfo->{cost};
		$adjconn = $numberinfo->{connectcost};
	}
	if ( $cardinfo->{disconnect_fee_pennies} > 0 ) {
		$disconnect_fee = ( $cardinfo->{disconnect_fee_pennies} * 100 );
	}
	else {
		$disconnect_fee = 0;
	}
	if (   ( $cardinfo->{minute_fee_minutes} * 60 ) <= $cardinfo->{timeused}
		&& ( $cardinfo->{minute_fee_minutes} * 60 ) >
		( $cardinfo->{timeused} + ( $answeredtime * 60 ) ) )
	{
		$minute_fee = ( $cardinfo->{minute_fee_pennies} * 100 );
	}
	else {
		$minute_fee = 0;
	}
	$bill_increments = ceil($total_seconds);
	$billseconds     = $bill_increments * $pricelistinfo->{inc};
	print STDERR "BILL_INC: $bill_increments  BILLSECONDS: $billseconds \n";
	print STDERR "ADJCOST: $adjcost  ADJCONN: $adjconn DISC_FEE $disconnect_fee \n";
	print STDERR "PER MINUTE SURCHARGE: $perminsurcharge CONNECT SURCHARGE: $connectsurcharge \n";
	print STDERR "MINUTE FEE: $minute_fee\n";
	$adjcost = $adjcost + $perminsurcharge;
	$adjconn = $adjconn + $connectsurcharge;
	$cost            =
	  (( $billseconds / 60 ) * $adjcost) + $adjconn + $disconnect_fee +
	  $minute_fee;
	return $cost;
}

sub timelimit() { #Calculate and say the time limit.
	my ( $numberinfo, $pricelistinfo, $cardinfo ) = @_;
	my ( $connectfee, $cost, $timelimit, $available, $maxtime, $balance );
	if ( $numberinfo->{connectfee} > 0 ) {
		$connectfee = $numberinfo->{connectfee} / 100;
	}
	if ( $numberinfo->{cost} > 0 ) {
		$cost = $numberinfo->{cost} / 100;
	}

	# Timelimit is in seconds
	if ($cc == 0) {
	$available =
	  ( ( $cardinfo->{value} - $cardinfo->{used} ) / 100 ) - $connectfee;
	} elsif ( $cc == 1 ) {
		$balance = &accountbalance( $astpp_db, $cardinfo->{number} );
		$balance = ($balance * -1) + ( $cardinfo->{credit_limit} * 10000 );
		$available = ($balance - $connectfee) / 100;
	}
	if ( $available > 0 && $cost ) {
		$timelimit = ( ( $available / $cost ) * 60 );
	}
	elsif ( $available >= 0 && !$cost ) {
		$timelimit = 9000;
	}
	if ( $timelimit > 9000 ) {
		$timelimit = 9000;
	}
	if ($timelimit) {
		my $minutes = $timelimit / 60;
		$minutes = sprintf( "%.0f", $minutes );
		$AGI->stream_file($sound->{call_will_last});
		if ( $minutes == 1 ) {
			$AGI->say_number($minutes);
			$AGI->stream_file($sound->{minute});
		}
		elsif ( $minutes > 1 ) {
			$AGI->say_number($minutes);
			$AGI->stream_file($sound->{minutes});
		}
		else {
			$AGI->stream_file($sound->{not_enough_credit});
			$AGI->stream_file($sound->{goodbye});
			&leave($cardinfo);
		}
	}
	else {
		$AGI->stream_file($sound->{not_enough_credit});
		$AGI->stream_file($sound->{goodbye});
		&leave($cardinfo);
	}
	$maxtime   = $timelimit * 1000;
	$timelimit = "\|30\|THL($maxtime:60000:30000)\|Hj";
	$AGI->verbose( "Available: $available", $verbosity );
	$AGI->verbose( "Balance: $balance", $verbosity );
	$AGI->verbose( "Max Time: $maxtime", $verbosity );
	return $timelimit;
}

sub say_balance() { #Calculate and say the card balance.
	my ($cardinfo) = @_;
	my ( $connectfee, $cost, $included, $sub_balance, $balance, $main_balance );
	if ($cc == 0 ) {
	$balance = $cardinfo->{value} - $cardinfo->{used};
	} elsif ($cc ==1) {
	$balance = &accountbalance( $astpp_db, $cardinfo->{number} );
	$balance = ($balance * -1) + ( $cardinfo->{credit_limit} * 10000 );
	}
	if ( $balance > 0 ) {
		$balance      = $balance / 10000;
		$balance      = sprintf( "%.2f", $balance );
		$sub_balance  = substr( $balance, -2, 2 );
		$main_balance  = substr( $balance, 0, -2 );
		$AGI->stream_file($sound->{card_has_balance_of});
		if ( $main_balance == 1 ) {
			$AGI->say_number($main_balance);
			$AGI->stream_file($sound->{main_currency});
		}
		elsif ( $main_balance > 1 ) {
			$AGI->say_number($main_balance);
			$AGI->stream_file($sound->{main_currency_plural});
		}
		if ( $sub_balance == 1 ) {
			$AGI->say_number($sub_balance);
			$AGI->stream_file($sound->{sub_currency});
		}
		elsif ( $sub_balance > 1 ) {
			$AGI->say_number($sub_balance);
			$AGI->stream_file($sound->{sub_currency_plural});
		}
	}
	else {
		$AGI->stream_file($sound->{card_is_empty});
		$AGI->stream_file($sound->{goodbye});
		&leave($cardinfo);
	}
	return $balance;
}

sub update_balance() {  #Update the available credit on the calling card. 
	my ( $cardinfo, $charge ) = @_;
	my $sql =
	    "UPDATE callingcards SET used = "
	  . $astpp_db->quote( ($charge) + $cardinfo->{used} )
	  . " WHERE cardnumber = "
	  . $astpp_db->quote( $cardinfo->{cardnumber} );
	$astpp_db->do($sql);
}

sub write_cdr() { # Write the callingcardcdr record if this is a calling card.
	my (
		$cardinfo,  $clid,   $destination, $status,
		$callstart, $charge, $answeredtime
	  )
	  = @_;
	my ($sql);
	if (!$status) {$status = gettext("N/A"); }
	$sql =
"INSERT INTO callingcardcdrs (cardnumber,clid,destination,disposition,callstart,seconds,"
	  . "debit) VALUES ("
	  . $astpp_db->quote( $cardinfo->{cardnumber} ) . ", "
	  . $astpp_db->quote($clid) . ", "
	  . $astpp_db->quote($destination) . ", "
	  . $astpp_db->quote($status) . ", "
	  . $astpp_db->quote($callstart) . ", "
	  . $astpp_db->quote($answeredtime) . ", "
	  . $astpp_db->quote($charge) . ")";
	$astpp_db->do($sql);
}

sub dialout() { # Rig up the LCR stuff and do the outbound dialing.
				# If a call does not go through we give the user the option	
				# of trying again.
	my ( $destination, $timelimit, $numberinfo, $pricelistinfo, $cardinfo,$perminsurcharge, $connectsurcharge  ) =
	  @_;
	my ( $status, $count, $increment );
	$AGI->verbose( "Looking for outbound Route", $verbosity );
	my @outboundroutes = &get_outbound_routes( $astpp_db, $destination );
	my $count = @outboundroutes;
	if ( $count == 0 ) {
		$AGI->verbose( "NO OUTBOUND ROUTES FOUND!", $verbosity );
		my $order = $AGI->get_data( $sound->{noanswer}, $input_timeout, 1 );
		if ( $order != 1 ) {
			&write_cdr( $cardinfo, "", $destination, gettext("NO Route Found"), "", 0, 0 );
			&leave($cardinfo);
		}
	}
	$count = 0;
	foreach my $route (@outboundroutes) {
		my $trunk      = &get_dial_string( $astpp_db, $route, $destination );
		my $dialstring = $trunk . $timelimit;
		my $callstart  = localtime();
		$callstart   = &prettytimestamp if $cc == 1;
		$AGI->set_variable( "\"LCRSTRING$count\"",
			"\"$enh_config->{callingcardowner}\"" );
		$AGI->exec( 'Set', "accountcode=$enh_config->{callingcardowner}" );
		my $res = $AGI->exec("DIAL $dialstring");
		$status = $AGI->get_variable("DIALSTATUS");
		my $answeredtime = $AGI->get_variable("ANSWEREDTIME");
		$AGI->verbose( "CALL STATUS $status",         $verbosity );
		$AGI->verbose( "ANSWERED TIME $answeredtime", $verbosity );
		$AGI->verbose( "Account CC?: $cc",            $verbosity );

		if ( ( $status != ~/CHANUNAVAIL/ ) && ( $status != ~/CONGESTION/ ) ) {
			if ( $status =~ /BUSY/ ) {
				$AGI->verbose( "CALL BUSY", $verbosity );
				my $order = $AGI->get_data( $sound->{busy}, $input_timeout,1 );
				if ( $order != 1 ) {
					&write_cdr( $cardinfo, "", $destination, $status,
						$callstart, 0, 0 )
					  if $cc == 0;
					&write_account_cdr( $astpp_db, $cardinfo->{number}, 0,
						$destination, $callstart )
					  if $cc == 1;
					&leave($cardinfo);
				 } else {
                                        push @outboundroutes, $route;
				}
			}
			elsif ( $status =~ /NOANSWER/ ) {
				$AGI->verbose( "NO ANSWER", $verbosity );
				my $order = $AGI->get_data( $sound->{noanswer}, $input_timeout,1 );
				if ( $order != 1 ) {
					&write_cdr( $cardinfo, "", $destination, $status,
						$callstart, 0, 0 )
					  if $cc == 0;
					&write_account_cdr( $astpp_db, $cardinfo->{number}, 0,
						$destination, $callstart )
					  if $cc == 1;
					&leave($cardinfo);
				 } else {
                                        push @outboundroutes, $route;
				}
			}
			elsif ( $status =~ /CANCEL/ ) {
				$AGI->verbose( "CALL CANCELLED", $verbosity );
				$AGI->stream_file($sound->{busy});
				&write_cdr( $cardinfo, "", $destination, $status, $callstart, 0,
					0 )
				  if $cc == 0;
				&write_account_cdr( $astpp_db, $cardinfo->{number}, 0,
					$destination, $callstart )
				  if $cc == 1;
				&leave($cardinfo);
			}
			elsif ( $status =~ /ANSWER/ ) {
				$AGI->verbose( "CALL ANSWERED", $verbosity );
				my $charge =
						  &calc_charge( $cardinfo, $pricelistinfo, $numberinfo,
							$answeredtime,$perminsurcharge, $connectsurcharge  );
				$AGI->verbose( "Cost $charge ", $verbosity );
				if ( $cc == 0 ) {
					&write_cdr(
						$cardinfo,  "",      $destination, $status,
						$callstart, $charge, $answeredtime
					);
					&update_balance( $cardinfo, $charge );
				}
				elsif ( $cc == 1 ) {
					my $status =
					  &write_account_cdr( $astpp_db, $cardinfo->{number},
						$charge, $destination, $callstart );
					$AGI->verbose( $status, $verbosity );
				}
				$AGI->stream_file($sound->{call_completed});
				&leave($cardinfo);
			}
			else {
				$AGI->verbose( "ERROR - ERROR - ERROR", $verbosity );
				my $order = $AGI->get_data( $sound->{noanswer}, $input_timeout,1 );
				if ( $order != 1 ) {
					&write_cdr( $cardinfo, "", $destination, $status,
						$callstart, 0, 0 )
					  if $cc == 0;
					&write_account_cdr( $astpp_db, $cardinfo->{number}, 0,
						$destination, $callstart )
					  if $cc == 1;
					&leave($cardinfo);
				}
			}
		}
	}
}

sub leave() {  # Prepare everything and then leave the calling card app.
	my ($cardinfo) = @_;
	&set_in_use( $cardinfo, 0 ) if $cc == 0;
	my $whatnow =
	  $AGI->get_data( $sound->{astpp_callingcard_menu}, $input_timeout, 1 );
	$AGI->verbose( "WHAT NEXT = $whatnow ", $verbosity );
	$AGI->set_variable( "\"CARDNUMBER\"", "\"$cardinfo->{cardnumber}\"" );
	$AGI->exec( 'Set', "CARDNUMBER=$cardinfo->{cardnumber}" );
	$AGI->set_variable( "\"PIN\"", "\"$cardinfo->{pin}\"" );
	$AGI->exec( 'Set', "PIN=$cardinfo->{pin}" );

	if ( $whatnow == 1 ) {
		$AGI->set_variable( "\"NEWCALL\"", "\"1\"" );
		$AGI->exec( 'Set', "NEWCALL=1" );
	}
	elsif ( $whatnow == 2 ) {
		$AGI->set_variable( "\"BALANCE\"", "\"1\"" );
		$AGI->exec( 'Set', "BALANCE=1" );
	}
	elsif ( $whatnow == 3 ) {
		$AGI->stream_file($sound->{goodbye});
		$AGI->hangup;
	}
	exit(0);
}
################# Program Starts Here #################################
my ( $cardnum, $pin, $destination, $connectsurcharge, $perminsurcharge ) =
  @ARGV;
%input = $AGI->ReadParse();
my ( $retries, $cardinfo, $numberinfo, $pricelistinfo, @outboundroutes,
	$callstart );
$AGI->answer();
&initialize;
sleep 1;    #Pause for 1 seconds to allow everything to get hooked up.
print STDERR "DEBUG MODE: $config->{debug}\n";
if ($config->{debug}) {
foreach my $key (keys %input) {
         print STDERR "Key: $key Value: " . %input->{$key} . "\n";
    }
}

if ($cardnum) { 
	$cardinfo = &get_callingcard( $astpp_db, $cardnum );
	if ( !$cardinfo ) {
		$cardinfo = &get_account_cc( $astpp_db, $cardnum );
		$cc = 1 if $cardinfo;
	}
}
# If $cc == 1 means that we are using an ASTPP account instead of an actual
# calling card.

if ( $cardinfo->{status} != 1 ) {
	$retries = 0;
	while ( $cardinfo->{status} != 1 && $retries < 3 ) {
		$cardnum = $AGI->get_data( $sound->{cardnumber}, $input_timeout );
		$cardinfo = &get_callingcard( $astpp_db, $cardnum );
		if ( !$cardinfo ) {
			$cardinfo = &get_account_cc( $astpp_db, $cardnum );
			$cc = 1 if $cardinfo;
		}
		$AGI->verbose( "ASTPP Number: $cardnum ", $verbosity )
		  if $config->{debug} == 1;
		$AGI->verbose( "ASTPP Number Status: $cardinfo->{status}", $verbosity )
		  if $config->{debug} == 1;
		if ( $cardinfo->{status} != 1 ) {
			$AGI->stream_file($sound->{cardnumber_incorrect});
		}
		$retries++;
	}
	if ( $cardinfo->{status} != 1 ) {
		$AGI->stream_file($sound->{goodbye});
		exit(0);
	}
}
if ( $pin != $cardinfo->{pin} ) {
	$retries = 0;
	while ( $cardinfo->{pin} != $pin && $retries < 3 ) {
		$pin = $AGI->get_data( $sound->{pin}, $input_timeout );
		if ( $cardinfo->{pin} != $pin ) {
			$AGI->stream_file($sound->{pin_incorrect});
		}
		$retries++;
	}
	if ( $pin != $cardinfo->{pin} ) {

		#		$AGI->stream_file($sound->{pin_incorrect});
		$AGI->stream_file($sound->{goodbye});
		exit(0);
	}
}
&check_card($cardinfo) if $cc == 0;
my $balance = &say_balance($cardinfo);
if ( $destination eq "BALANCE" ) {
	&leave($cardinfo);
}

# Getting this far means we have a valid card and pin.
$brandinfo = &get_cc_brand( $astpp_db, $cardinfo->{brand} ) if $cc == 0;
$pricelistinfo = &get_pricelist( $astpp_db, $brandinfo->{pricelist} )
  if $cc == 0;
$pricelistinfo = &get_pricelist( $astpp_db, $cardinfo->{pricelist} )
  if $cc == 1;
if ($destination) {
	$numberinfo =
	  &get_route( $astpp_db, $config, $destination, $brandinfo->{pricelist}, $cardinfo )
	  if $cc == 0;
	$numberinfo =
	  &get_route( $astpp_db, $config, $destination, $cardinfo->{pricelist}, $cardinfo )
	  if $cc == 1;
}
$retries = 0;
while ( !$numberinfo->{pattern} && $retries < 3 ) {
	$destination = $AGI->get_data( $sound->{destination}, $input_timeout );
	$numberinfo =
	  &get_route( $astpp_db, $config, $destination, $brandinfo->{pricelist}, $cardinfo );
	if ( !$numberinfo->{pattern} ) {
		$AGI->stream_file($sound->{destination_incorrect});
	}
	$retries++;
}
if ( !$numberinfo->{pattern} ) {
	$AGI->stream_file($sound->{destination_incorrect});
	$AGI->stream_file($sound->{goodbye});
	$AGI->hangup();
	&leave($cardinfo);
}

#  Congratulations, we now have a working card,pin, and phone number.
&tell_cost( $numberinfo, $pricelistinfo, $cardinfo,$perminsurcharge, $connectsurcharge  );
my $timelimit = &timelimit( $numberinfo, $pricelistinfo, $cardinfo );
$AGI->stream_file($sound->{please_wait_will_connect});
&dialout( $destination, $timelimit, $numberinfo, $pricelistinfo, $cardinfo,$perminsurcharge, $connectsurcharge  );
